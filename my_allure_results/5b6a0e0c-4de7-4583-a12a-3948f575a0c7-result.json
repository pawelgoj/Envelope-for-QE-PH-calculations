{"name": "User enter correct data into the form", "status": "broken", "statusDetails": {"message": "TypeError: a bytes-like object is required, not 'Image'", "trace": "self = <test_gui.TestsGUI object at 0x00000284E3A9BBE0>, standard_deviation = '5.5'\nscale_param = '5.5', number_of_points_in_envelope = '500'\n\n    @allure.title(\"User enter correct data into the form\")\n    @allure.description_html(\"\"\"\n    <p>User enter correct data into the form. Positive test case.</p>\n    <p>Environment: Windows 10 Home 20H2</p>\n    \"\"\")\n    @allure.severity(allure.severity_level.NORMAL)\n    #@pytest.mark.skip\n    @pytest.mark.parametrize(\n        'standard_deviation,scale_param,number_of_points_in_envelope',\n        [('5.5', '5.5', '500')]\n    )\n    def test_user_gui_positive_test_case(self, standard_deviation, scale_param, number_of_points_in_envelope):\n    \n        #When\n        button_chose_input_file = self.driver.find_element_by_xpath(AppLocators.button_chose_input_file)\n        button_chose_input_file.click()\n    \n        input_directory_button = self.driver.find_element_by_xpath(AppLocators.input_path_button)\n        input_directory_button.click()\n    \n        input_directory_input = self.driver.find_element_by_xpath(AppLocators.input_path_input)\n        input_directory_input.click()\n    \n        #press keys in the same time\n        input_directory_input.send_keys(Keys.CONTROL, 'a')\n    \n        input_directory_input.send_keys(Keys.BACKSPACE + self.file_test_path)\n    \n        button_input_directory = self.driver.find_element_by_xpath(AppLocators.input_path_button)\n        button_input_directory.click()\n    \n        input_file = self.driver.find_element_by_xpath(AppLocators.input_file_name)\n        input_file.click()\n        input_file.send_keys(self.file_test_dynmat)\n    \n        button_sent_input_file = self.driver.find_element_by_xpath(AppLocators.button_sent_input_file)\n        button_sent_input_file.click()\n    \n        button_sent_input_ir = self.driver.find_element_by_xpath(AppLocators.check_button_IR)\n        button_sent_input_ir.click()\n    \n        button_sent_input_raman = self.driver.find_element_by_xpath(AppLocators.check_button_Raman)\n        button_sent_input_raman.click()\n    \n        radio_button_Voigt = self.driver.find_element_by_xpath(AppLocators.radio_button_Voigt)\n        radio_button_Voigt.click()\n    \n        check_button_PTI = self.driver.find_element_by_xpath(AppLocators.check_button_PTI)\n        check_button_PTI.click()\n    \n    \n        entry_standard_deviation = self.driver.find_element_by_xpath(AppLocators.entry_standard_deviation)\n        entry_standard_deviation.click()\n        entry_standard_deviation.send_keys(standard_deviation)\n    \n        entry_scale_param =self.driver.find_element_by_xpath(AppLocators.entry_scale_param)\n        entry_scale_param.click()\n        entry_scale_param.send_keys(scale_param)\n    \n        entry_number_of_points = self.driver.find_element_by_xpath(AppLocators.entry_number_of_pints_in_envelope)\n        entry_number_of_points.click()\n        entry_number_of_points.send_keys(number_of_points_in_envelope)\n    \n        button_calculate_envelope = self.driver.find_element_by_xpath(AppLocators.button_calculate_envelope)\n        button_calculate_envelope.click()\n    \n    \n        fig_with_Raman = self.driver.find_element_by_xpath(AppLocators.fig_with_Raman)\n    \n        #Slicing of figure\n        location_Raman = fig_with_Raman.location\n        size = fig_with_Raman.size\n    \n        image1 = base64.decodebytes(bytes(self.driver.get_screenshot_as_base64(), \"utf-8\"))\n        image1 = Image.open(BytesIO(image1))\n        image2 = Image.open('D:/Praca/Symulacje/Narzedzia/Moje/Envelope_for_QE/Envelope-for-dynmat-quantum-esspreso/Test_data/Envelope_for_QE_PH_calculations.png')\n    \n        left = location_Raman['x']\n        top = location_Raman['y']\n        right = location_Raman['x'] + size['width']\n        bottom = location_Raman['y'] + size['height']\n    \n        image1 = image1.crop((left, top, right, bottom))\n    \n        #Compare images by image hashing\n        hash0 = imagehash.average_hash(image1)\n        hash1 = imagehash.average_hash(image2)\n    \n        print('Delta_hash: ', hash0 - hash1)\n    \n        if hash0 - hash1 < 0.5:\n            assert_val = True\n        else:\n            assert_val = False\n    \n        #Then\n        assert assert_val\n    \n        #When\n>       allure.attach(image1, name=\"App_Window.png\", attachment_type=AttachmentType.PNG)\n\ntest_gui.py:256: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\pagoj\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\allure_commons\\_allure.py:179: in __call__\n    plugin_manager.hook.attach_data(body=body, name=name, attachment_type=attachment_type, extension=extension)\nC:\\Users\\pagoj\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nC:\\Users\\pagoj\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nC:\\Users\\pagoj\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nC:\\Users\\pagoj\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\allure_pytest\\listener.py:222: in attach_data\n    self.allure_logger.attach_data(uuid4(), body, name=name, attachment_type=attachment_type, extension=extension)\nC:\\Users\\pagoj\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\allure_commons\\reporter.py:119: in attach_data\n    plugin_manager.hook.report_attached_data(body=body, file_name=file_name)\nC:\\Users\\pagoj\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nC:\\Users\\pagoj\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nC:\\Users\\pagoj\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.logger.AllureFileLogger object at 0x00000284CA6DA460>\nbody = <PIL.Image.Image image mode=RGB size=450x350 at 0x284EBB953D0>\nfile_name = '2fa4b7f3-3228-4ce9-b9c8-15bad357145f-attachment.png'\n\n    @hookimpl\n    def report_attached_data(self, body, file_name):\n        destination = os.path.join(self._report_dir, file_name)\n        with open(destination, 'wb') as attached_file:\n            if isinstance(body, text_type):\n                attached_file.write(body.encode('utf-8'))\n            else:\n>               attached_file.write(body)\nE               TypeError: a bytes-like object is required, not 'Image'\n\nC:\\Users\\pagoj\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\allure_commons\\logger.py:62: TypeError"}, "descriptionHtml": "\n    <p>User enter correct data into the form. Positive test case.</p>\n    <p>Environment: Windows 10 Home 20H2</p>\n    ", "attachments": [{"name": "App_Window.png", "source": "2fa4b7f3-3228-4ce9-b9c8-15bad357145f-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "b3149bf3-a98d-4c3a-abba-dabe33e809af-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "standard_deviation", "value": "'5.5'"}, {"name": "scale_param", "value": "'5.5'"}, {"name": "number_of_points_in_envelope", "value": "'500'"}], "start": 1647122085545, "stop": 1647122129215, "uuid": "1986720e-27f0-45fb-adde-fb3780176735", "historyId": "e38ab36ebce770a47035032b79c88a1c", "testCaseId": "7feb56f98250f31f284b353e93fb7966", "fullName": "test_gui.TestsGUI#test_user_gui_positive_test_case", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "suite", "value": "test_gui"}, {"name": "subSuite", "value": "TestsGUI"}, {"name": "host", "value": "LAPTOP-DKHHR5FU"}, {"name": "thread", "value": "17168-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_gui"}]}